from werkzeug.security import generate_password_hash
import csv
from faker import Faker

num_users = 100
num_seller_reviews = 100
num_products = 10000
num_purchases = 2500

Faker.seed(0)
fake = Faker()


def get_csv_writer(f):
    return csv.writer(f, dialect='unix')


def gen_users(num_users):
    with open('Users.csv', 'w') as f:
        writer = get_csv_writer(f)
        print('Users...', end=' ', flush=True)
        for uid in range(num_users):
            if uid % 10 == 0:
                print(f'{uid}', end=' ', flush=True)
            profile = fake.profile()
            email = profile['mail']
            plain_password = f'pass{uid}'
            password = generate_password_hash(plain_password)
            name_components = profile['name'].split(' ')
            firstname = name_components[0]
            lastname = name_components[-1]

            address = fake.address()
            isSeller = True
            photo = '/static/default_profile_picture.jpg'

            writer.writerow([uid, email, password, firstname, lastname, address, isSeller, photo])
        print(f'{num_users} generated')
    return


def gen_products(num_products):
    available_pids = []
    with open('Products.csv', 'w') as f:
        writer = get_csv_writer(f)
        print('Products...', end=' ', flush=True)
        for pid in range(num_products):
            if pid % 100 == 0:
                print(f'{pid}', end=' ', flush=True)
            name = fake.sentence(nb_words=4)[:-1]
            price = f'{str(fake.random_int(max=500))}.{fake.random_int(max=99):02}'
            available = fake.random_element(elements=('true', 'false'))
            description = fake.sentence(nb_words=300)[:-1]
            if available == 'true':
                available_pids.append(pid)
            writer.writerow([pid, name, price, description, available])
        print(f'{num_products} generated; {len(available_pids)} available')
    return available_pids


def gen_purchases(num_purchases, available_pids):
    with open('Purchases.csv', 'w') as f:
        writer = get_csv_writer(f)
        print('Purchases...', end=' ', flush=True)
        for id in range(num_purchases):
            if id % 100 == 0:
                print(f'{id}', end=' ', flush=True)
            uid = fake.random_int(min=0, max=num_users-1)
            pid = fake.random_element(elements=available_pids)
            time_purchased = fake.date_time()
            writer.writerow([id, uid, pid, time_purchased])
        print(f'{num_purchases} generated')
    return

def gen_inventory(num_products, num_users):
    available_pids = []
    with open('Inventory.csv', 'w') as f:
        writer = get_csv_writer(f)
        print('Inventory...', end=' ', flush=True)
        for uid in range(num_users):
            for pid in range(num_products):
                if pid % 100 == 0:
                    print(f'{pid}', end=' ', flush=True)
                quantity = fake.random_int(min=0, max=100)  # Generate random quantity
                if quantity > 0:
                    available_pids.append(pid)
                    writer.writerow([uid, pid, quantity])
        print(f'{num_products * num_users} records generated; {len(available_pids)} available')
    return available_pids

def gen_seller_reviews(num_seller_reviews, num_users):
    with open('SellerReviews.csv', 'w') as f:
        writer = get_csv_writer(f)
        print('Seller Reviews...', end=' ', flush=True)
        for review_id in range(num_seller_reviews):
            if review_id % 100 == 0:
                print(f'{review_id}', end=' ', flush=True)
            user_id = fake.random_int(min=0, max=num_users - 1)
            seller_id = fake.random_int(min=0, max=num_users - 1)
            time_reviewed = fake.date_time()
            comments = fake.paragraph()
            num_stars = fake.random_int(min=1, max=5)
            writer.writerow([review_id, user_id, time_reviewed, comments, num_stars, seller_id])
        print(f'{num_seller_reviews} generated')
    return
def gen_product_reviews(num_products, num_users):
    with open('ProductReviews.csv', 'w') as f:
        writer = get_csv_writer(f)
        print('Product Reviews...', end=' ', flush=True)
        review_id = 0
        for pid in range(num_products):
            if review_id % 100 == 0:
                print(f'{review_id}', end=' ', flush=True)
            for user_id in range(0, num_users, 10):
                time_reviewed = fake.date_time()
                comments = fake.paragraph()
                num_stars = fake.random_int(min=1, max=5)
                writer.writerow([review_id, user_id, time_reviewed, comments, num_stars, pid])
                review_id += 1
        print(f'{review_id} generated')
    return

# CREATE TABLE Cart (
#     id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
#     user_id INT NOT NULL REFERENCES Users(id),
#     product_id INT NOT NULL REFERENCES Products(id),
#     seller_id INT NOT NULL REFERENCES Users(id),
#     quantity INT NOT NULL,
#     saved BOOLEAN DEFAULT FALSE,
#     order_id INT DEFAULT NULL,
#     fulfilled BOOLEAN DEFAULT FALSE,
#     time_fulfilled timestamp without time zone DEFAULT NULL
# );
def gen_cart(num_products, num_users):
    available_pids = []
    with open('Cart.csv', 'w') as f:
        writer = get_csv_writer(f)
        print('Cart...', end=' ', flush=True)
        id = 0
        for uid in range(num_users):
            for pid in range(0,num_products-1,500):
                if pid % 100 == 0:
                    print(f'{pid}', end=' ', flush=True)
                quantity = fake.random_int(min=0, max=5)  # Generate random quantity
                seller_id = fake.random_int(min=0, max=num_users-1)
                saved = fake.boolean()
                fulfilled = fake.boolean()
                time = fake.date_time()
                if quantity > 0:
                    available_pids.append(pid)
                    row = [id, uid, pid, seller_id, quantity, saved, fulfilled, time]
                    writer.writerow(row)
                    id += 1
        print(f'{num_products * num_users} records generated; {len(available_pids)} available')
    return available_pids



gen_users(num_users)
gen_cart(num_products, num_users)
available_pids = gen_products(num_products)
gen_purchases(num_purchases, available_pids)
gen_product_reviews(num_products, num_users)
gen_seller_reviews(num_seller_reviews, num_users)
gen_inventory(num_products, num_users)
